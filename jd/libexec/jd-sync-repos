#!/usr/bin/env ruby
# Usage: jd sync-repos [opts]
# Summary: Update all git repos under a directory

require 'pathname'
require 'stringio'
require 'open3'
require 'fileutils'
require 'thread'
require 'optparse'
require 'ostruct'

require File.join(ENV["_JD_ROOT"], "share", "lib", "gitsync.rb")

is_tty = $stdout.respond_to?(:tty?) && $stdout.tty?

FORMATS = [:dots, :full]
OPTIONS = OpenStruct.new(jobs: 2, base_dir: ENV["SOURCE_DIR"], format: :dots, colorize: is_tty)

parser = OptionParser.new do |opts|
  opts.banner = "Usage: jd sync-repos [options]"

  opts.on("-jNUM", "--threads NUM", Integer, "Number of concurrent threads to use") do |j|
    OPTIONS.jobs = j or abort("choose a number of threads")
  end

  opts.on("-fFORMAT", "--format FORMAT", FORMATS, "Which output format to use (#{FORMATS.map(&:to_s).join(",")})") do |f|
    OPTIONS.format = f or abort("choose a number of threads")
  end

  opts.on("--[no-]color", "Colorize output") do |c|
    OPTIONS.colorize = c
  end

  opts.on("--base-dir DIR", String, "Alternate base directory") do |d|
    OPTIONS.base_dir = d
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

if ARGV[0] == "--complete"
  parser.send(:visit, :compsys, {}, {}) {|o, d|
    puts "#{o}[#{d.gsub(/[\\\"\[\]]/, '\\\\\&')}]"
  }
  exit 0
end

parser.parse!

def find_dirs(base)
  path = Pathname(base)
  if path.exist?
    Dir.glob(path.join("*", ".git")).map { |p| Pathname(p).dirname }
  else
    []
  end
end

Result = Struct.new(:name, :actions)

class Repository
  def self.from_path(path)
    pn = Pathname(path)
    new(pn, pn.basename)
  end

  attr_reader :path, :name

  def initialize(path, name)
    @path = path
    @name = name
  end

  def path
    @path ||= BASE.join(repo)
  end

  def update!
    actions = Gitsync.new(dir: path, quiet: true).actions
    actions.each do |action|
      case action
      when Gitsync::Update
        system *action.command, chdir: path
      end
    end
    Result.new(name, actions)
  end
end

work = Queue.new
done = Queue.new

n = OPTIONS[:jobs].times

find_dirs(OPTIONS.base_dir).each do |d|
  work << Repository.from_path(d)
end

n.each { work << :done }

workers = n.map do |i|
  Thread.new do
    loop do
      repo = work.pop
      break if repo == :done
      result = repo.update!
      done.push(result)
    end
  end
end

results = []

printer = Thread.new do
  loop do
    result = done.pop
    break if result == :done
    results.push(result)
    case OPTIONS.format
    when :dots
      print "."
    when :full
      puts "\n** #{result.name} **"
      result.actions.each do |action|
        puts action.formatted(OPTIONS.colorize)
      end
    end
  end
end

workers.each(&:join)
done.push(:done)
printer.join

puts "done\n\nUpdated #{results.length} repositories"

if OPTIONS.format == :dots
  puts
  results.each do |result|
    updates = result.actions.filter { |a| Gitsync::Update === a }
    unless updates.empty?
      updates.each do |update|
        puts "[#{result.name}] #{update.formatted(OPTIONS.colorize)}"
      end
    end
  end
end

failures = results.flat_map do |result|
  result.actions.filter { |a| Gitsync::Error === a }.map do |action|
    "[#{result.name}] #{action.formatted(OPTIONS.colorize)}"
  end
end

unless failures.empty?
  puts "\nThere were problems with the following repos:"
  failures.each do |f|
    puts f
  end
  exit 1
end
