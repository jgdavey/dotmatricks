# -*- mode: sh; -*-
# vim: set ft=sh sw=2 sts=2:

[ -e "$SOURCE_DIR" ] || SOURCE_DIR="$HOME/src"
export SOURCE_DIR

# Paths for prepending
for dir in /usr/local/bin "$HOME/bin" .git/safe/../../bin; do
  case "$PATH:" in
    *:"$dir":*) PATH="`echo "$PATH"|sed -e "s#:$dir##"`" ;;
  esac
  case "$dir" in
    /*) [ ! -d "$dir" ] || PATH="$dir:$PATH" ;;
    *) PATH="$dir:$PATH" ;;
  esac
done

# Paths for appending
for dir in /usr/local/sbin /opt/local/sbin /usr/X11/bin; do
  case ":$PATH:" in
    *:"$dir":*) ;;
    *) [ ! -d "$dir" ] || PATH="$PATH:$dir" ;;
  esac
done

if command -v hub >/dev/null; then
  git() {
    command hub "$@"
  }
fi

# git_prompt_info accepts 0 or 1 arguments (i.e., format string)
# returns text to add to bash PS1 prompt (includes branch name)
git_prompt_info () {
  local g="$(command git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local d
    local s
    # Rebasing
    if [ -d "$g/rebase-apply" ] ; then
      if test -f "$g/rebase-apply/rebasing" ; then
        r="|REBASE"
      fi
      b="$(command git symbolic-ref HEAD 2>/dev/null)"
    # Interactive rebase
    elif [ -f "$g/rebase-merge/interactive" ] ; then
      r="|REBASE-i"
      b="$(cat "$g/rebase-merge/head-name")"
    # Merging
    elif [ -f "$g/MERGE_HEAD" ] ; then
      r="|MERGING"
      b="$(command git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ] ; then
        r="|BISECTING"
      fi
      if ! b="$(command git symbolic-ref HEAD 2>/dev/null)" ; then
        if ! b="$(command git describe --exact-match HEAD 2>/dev/null)" ; then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi

    # Dirty Branch
    local newfile='?? '
    if [ -n "$ZSH_VERSION" ]; then
      newfile='\?\? '
    fi
    d=''
    s=$(command git status --porcelain 2> /dev/null)
    [[ $s =~ "$newfile" ]] && d+='+'
    [[ $s =~ "M " ]] && d+='*'
    [[ $s =~ "D " ]] && d+='-'

    printf "${1-"(%s) "}" "${b##refs/heads/}$r$d"
  fi
}

alias cd..='cd ..'
alias ..='cd ..'
alias ll='ls -l'
alias l="ls -F -G -lah"
alias la="ls -a"
alias lsd='ls -ld *(-/DN)'
alias gap='git add -p'
alias gb='git branch'
alias gc='git commit -v'
alias gd='git diff'
alias gdc='git diff --cached'
alias gp='git push'
alias gpr='git pull --rebase'
alias gst='git status'
alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias grep='command grep --color=auto'
alias reset-authors='git commit --amend --reset-author -C HEAD'
alias vi='vim'

l.() {
  ls -ld "${1:-$PWD}"/.[^.]*
}

# RVM exectuble path for scripting, when available
if [[ -s "$HOME/.rvm/bin" ]] ; then export PATH="$PATH:$HOME/.rvm/bin" ; fi
if [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then source "$HOME/.rvm/scripts/rvm" ; fi

[ -n "$VISUAL" ] || VISUAL="emacsclient --alternate-editor='' -nw -c"
[ -n "$EDITOR" ] || EDITOR="$VISUAL"
[ -n "$PSQL_EDITOR" ] || PSQL_EDITOR='vim -c"setf sql"'
export VISUAL EDITOR PSQL_EDITOR
alias e="$EDITOR"
alias E="SUDO_EDITOR=\"$EDITOR\" sudoedit"

# http://twistedcode.blogspot.com/2008/04/lscolors-explained.html
export CLICOLOR=1
export LSCOLORS=Dxfxcxdxbxegedabadacad
export ZLS_COLORS=$LSCOLORS
export RI="--format ansi -T"
export GREP_COLOR='1;32'
export LESS=FRX
export GOPATH="$SOURCE_DIR"
export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"
